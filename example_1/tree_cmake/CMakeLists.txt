cmake_minimum_required (VERSION 2.8) 
 
set (PROJECT hello) 
set (TARGET libs)
set (LICENSE license)
set (SOURCE source)
set (CMAKE source)

#cmake_policy(SET CMP0009 NEW)
 
project (${PROJECT}) 

#include_directories( ./src/foo )


MACRO(RECDIRLIST return curdir)
  #FILE(GLOB_RECURSE children RELATIVE ${curdir} ${curdir}/*)
  FILE(GLOB_RECURSE children ${curdir}/*  )
  SET(dirlist "")
 
  FOREACH(child ${children})
    GET_FILENAME_COMPONENT(dirpath ${child} PATH)
    LIST(APPEND dirlist ${dirpath})
  ENDFOREACH()
  LIST(REMOVE_DUPLICATES dirlist)
  SET(${return} ${dirlist})

ENDMACRO()

MACRO(SUBDIRLIST return curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
 
  FOREACH(child ${children})
	IF(IS_DIRECTORY ${curdir}/${child})
        	LIST(APPEND dirlist ${child})
    	ENDIF()
  ENDFOREACH()
  LIST(REMOVE_DUPLICATES dirlist)
  SET(${return} ${dirlist})

ENDMACRO()

SUBDIRLIST(SUBDIRS ${CMAKE_SOURCE_DIR}/source )

set( PROJECT_DIRS ${CMAKE_SOURCE_DIR}/${SOURCE} )
set( LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/${TARGET})
set( LICENSE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/${LICENSE})

FILE(MAKE_DIRECTORY  ${LIBRARY_OUTPUT_PATH} )
FILE(MAKE_DIRECTORY  ${LICENSE_OUTPUT_PATH}  )

 	

project( openssl )

set(TARGET libssl )
set(MAJOR 1)
set(MINOR 0.2)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

	add_custom_target( ${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
		COMMAND ./config --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} shared && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/LICENSE
	)

	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( boost )

set(TARGET libboost )
set(MAJOR 1)
set(MINOR 60.0)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/stage/lib")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/libxml")

	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin/${TARGET}_system${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin/${TARGET}_system${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND ./bootstrap.sh && ./b2 headers && ./b2 link=shared variant=release --libdir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin --includedir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ./b2 link=shared variant=release --libdir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin --includedir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}  install
		DEPENDS openssl
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/LICENSE_1_0.txt
	)

	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( freetype )

set(TARGET libfreetype )
set(MAJOR 2)
set(MINOR 6.3)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/objs/.libs")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )



	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
		COMMAND export CXXFLAGS="$CXXFLAGS -fPIC"  && ./autogen.sh && ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} --enable-static --enable-shared  && make -j4 && make install 
		DEPENDS boost
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/docs/LICENSE.TXT
	)

	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( libass )

set(TARGET libass )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )

	set(FFMPEG ffmpeg)

	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/libass/.libs")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
		COMMAND cd .. && ./build.sh
		DEPENDS freetype fribidi
		COMMENT "LibASS"
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
	)
	 

	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( cpp-netlib )

set(TARGET libcppnetlib-uri )
set(MAJOR 0)
set(MINOR 12)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	#set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/libs/network/src")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	set(CMAKE_MODULE_PATH ${LIBRARY_OUTPUT_PATH}/boost)

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		#COMMAND ./build.sh ${LIBRARY_OUTPUT_PATH} 
		COMMAND mkdir -p ./cpp-netlib-build
		COMMAND cd ./cpp-netlib-build && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}  -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++  -DBOOST_ROOT:PATHNAME=${LIBRARY_OUTPUT_PATH}/boost -DBOOST_LIBRARY_DIRS:FILEPATH=${LIBRARY_OUTPUT_PATH}/boost/lib -DOPENSSL_ROOT_DIR=${LIBRARY_OUTPUT_PATH}/openssl -DOPENSSL_LIBRARIES=${LIBRARY_OUTPUT_PATH}/openssl/bin -DOPENSSL_INCLUDE_DIR=${LIBRARY_OUTPUT_PATH}/openssl/include ../src && make -j4 && make install
		DEPENDS boost openssl
		WORKING_DIRECTORY ${PROJECT_DIRS}/${PROJECT_NAME}
		COMMENT "cpp-NetLib"
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/src/LICENSE_1_0.txt
	)


	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}    
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( freeimage )

set(TARGET libfreeimage )
set(MAJOR 3)
set(MINOR 18.0 )
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/Dist")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/Source")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND  make
		COMMAND  ${CMAKE_COMMAND} -E copy ${PROJECT_LIB_DIR}/${TARGET}-${MAJOR}.${MINOR}${SUFFIX} ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX}
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)
	
	file(GLOB HEADERS "${PROJECT_LIB_INCLUDE_DIR}/FreeImage.h" )

	set(LICENSES
		${PROJECT_SOURCE_DIR}/license-fi.txt
		${PROJECT_SOURCE_DIR}/license-gplv2.txt
		${PROJECT_SOURCE_DIR}/license-gplv3.txt
	)
	 
	INSTALL (
		FILES ${HEADERS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
	)

	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( libxml2 )

set(TARGET libxml2)
set(MAJOR 2)
set(MINOR 9.3)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/.libs")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/libxml")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND ./autogen.sh && ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} --disable-static --with-python-install-dir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin  && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
		COMMENT "LibXML2"
	)

	set(LICENSE
		${PROJECT_SOURCE_DIR}/Copyright
	)

	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)
									
ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( live555 )

set(TARGET libliveMedia )
set(MAJOR 52)
set(MINOR 0.4)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/liveMedia")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}.${MAJOR}.${MINOR} COMMENT "${PROJECT_NAME}" )

	set(LIBS 
		${PROJECT_SOURCE_DIR}/groupsock/libgroupsock.so.8.1.0
		${PROJECT_SOURCE_DIR}/liveMedia/libliveMedia.so.52.0.4
		${PROJECT_SOURCE_DIR}/BasicUsageEnvironment/libBasicUsageEnvironment.so.1.0.0
		${PROJECT_SOURCE_DIR}/UsageEnvironment/libUsageEnvironment.so.3.1.0			
	)

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}.${MAJOR}.${MINOR}
	#	COMMAND ./genMakefiles linux && make
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND ./genMakefiles linux-with-shared-libraries && make
		COMMAND cp -r ${PROJECT_SOURCE_DIR}/groupsock/libgroupsock.so.* ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
		COMMAND cp -r ${PROJECT_SOURCE_DIR}/liveMedia/libliveMedia.so.* ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
		COMMAND cp -r ${PROJECT_SOURCE_DIR}/BasicUsageEnvironment/libBasicUsageEnvironment.so.* ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
		COMMAND cp -r ${PROJECT_SOURCE_DIR}/UsageEnvironment/libUsageEnvironment.so.* ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
		COMMENT "LiveMedia555"
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/COPYING
	)
	 
	INSTALL (
		FILES ${HEADERS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
	)

	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( mongocxx )

set(TARGET libmongocxx )
set(CDRIVER libbson-1.0.so )
set(MAJOR 2)
set(MINOR 9.3)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/src/mongocxx")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

	set(CDRIVER_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/cdriver_src")
	set(CDRIVER_LIB_DIR "${CDRIVER_SOURCE_DIR}/.libs")

	#SUBDIRS ( ${CMAKE_SOURCE_DIR}/source/boost )

	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${CDRIVER}  ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}"  )

	ADD_CUSTOM_COMMAND(
		OUTPUT  ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${CDRIVER}
		COMMAND ./autogen.sh --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} && make -j4 && make install
		WORKING_DIRECTORY ${CDRIVER_SOURCE_DIR}
		COMMENT "MONGOC-DRIVER"
	)


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/libbson
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND mkdir -p ./build && cd ./build && PKG_CONFIG_PATH=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/pkgconfig/ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}  .. && make -j4 && make install
		DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${CDRIVER} 
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
		COMMENT "MONGOCXX-DRIVER"
	)

	set(
		LICENSE_CXX 
			${PROJECT_SOURCE_DIR}/LICENSE 
	)


	set(
		LICENSE_C 
			${PROJECT_DIRS}/${PROJECT_NAME}/cdriver_src/COPYING
	)


	INSTALL (
		FILES ${LICENSE_CXX} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

	INSTALL (
		FILES ${LICENSE_C} DESTINATION ${LICENSE_OUTPUT_PATH}/libson
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

###
###
###

project( portaudio )

set(TARGET libportaudio )
set(MAJOR 1)
set(MINOR 9)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib/.libs")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/")

	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} --disable-static  && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/LICENSE.txt
	)

	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( protobuf )

set(TARGET libprotobuf )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/src/.libs")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND ./autogen.sh && ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} --disable-shared  && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/LICENSE 
	)


	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( sdl )

set(TARGET libSDL2 )
set(MAJOR 2)
set(MINOR 0)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include")

	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND mkdir -p ./build/ 
		COMMAND cd ./build/ && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} ..  && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/COPYING.txt
	)



	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)
ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( ogre )

set(TARGET libOgreMain )
set(MAJOR 2)
set(MINOR 1)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME} )
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${PROJECT_LIB_DIR}/Dependencies/lib/libOIS.so ${PROJECT_LIB_DIR}/Dependencies/lib/libFreeImage.a
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND mkdir -p ./build
		COMMAND cd ./build && cmake -DCMAKE_INSTALL_PREFIX=${PROJECT_SOURCE_DIR}/Dependencies .. && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_DIRS}/${PROJECT_NAME}/deps
	)

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND mkdir -p ./build
		COMMAND cd ./build && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} .. && make -j4 && make install
		DEPENDS ${PROJECT_LIB_DIR}/Dependencies/lib/libOIS.so ${PROJECT_LIB_DIR}/Dependencies/lib/libFreeImage.a
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
	)

	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( gflags )

set(TARGET libgflags )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/lib")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND mkdir -p ./build
		COMMAND cd ./build && CXXFLAGS="-fPIC" cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} -DBUILD_STATIC_LIBS=ON .. && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING.txt 
	)


	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)
ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( glew )

set(TARGET libGLEW )
set(MAJOR 2.0)
set(MINOR 0 )
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/GL")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND cd ./auto && make -j4 && cd .. && make -j4
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_LIB_DIR}/${TARGET}${SUFFIX} ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} 
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_LIB_DIR}/${TARGET}${SUFFIX}.${MAJOR} ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}.${MAJOR} 
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_LIB_DIR}/${TARGET}${SUFFIX}.${MAJOR}.${MINOR} ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}.${MAJOR}.${MINOR}
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/LICENSE.txt
	)
	 
	INSTALL (
		FILES ${HEADERS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
	)

	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)
ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( glog )

set(TARGET libglog )
set(MAJOR 0)
set(MINOR 0.0)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/src/windows/glog")

	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND mkdir -p build 
		COMMAND cd ./build && export CXXFLAGS="-fPIC" && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} -DBUILD_SHARED_LIBS=ON .. && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)


	set(LICENSES
		${PROJECT_SOURCE_DIR}/COPYING
	)
	 
	INSTALL (
		FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( googletest )

set(TARGET libgtest)
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/googlemock/gtest")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/build")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/googletest
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/googlemosk
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND mkdir -p ./build
		COMMAND cd ./build && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} .. && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)


	set(GTEST
		${PROJECT_SOURCE_DIR}/googletest/LICENSE
	)


	set(GMOCK
		${PROJECT_SOURCE_DIR}/googlemock/LICENSE
	)


	INSTALL (
		FILES ${GTEST} DESTINATION ${LICENSE_OUTPUT_PATH}/googletest
	)

	INSTALL (
		FILES ${GMOCK} DESTINATION ${LICENSE_OUTPUT_PATH}/googlemosk
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( yasm )

set(TARGET libyasm )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(FFMPEG ffmpeg)

	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
		COMMAND ./configure --prefix="${LIBRARY_OUTPUT_PATH}/${FFMPEG}" && make -j4 && make install 
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)


	set(LICENSE
		${PROJECT_SOURCE_DIR}/COPYING
	)


	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)
ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( fribidi )

set(TARGET libfribidi )
set(MAJOR .0)
set(MINOR .3.6)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(FFMPEG ffmpeg)
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib/.libs")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
		COMMAND  ./bootstrap && ./configure --prefix="${LIBRARY_OUTPUT_PATH}/${FFMPEG}" && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
	)

	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( theora )

set(TARGET libtheora )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(FFMPEG ffmpeg)
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib/.libs")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
		COMMAND ./autogen.sh && ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${FFMPEG}  && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)


	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
	)

	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( vorbis )

set(TARGET libvorbis )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(FFMPEG ffmpeg)
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib/.libs")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
		COMMAND ./autogen.sh && ./configure --prefix="${LIBRARY_OUTPUT_PATH}/${FFMPEG}" && make -j4 && make install
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING
	)


	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

##
##
##

project( x264 )

set(TARGET libx264 )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(FFMPEG ffmpeg)
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include
		COMMAND cd .. && ./build.sh
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	ADD_CUSTOM_COMMAND(
		  TARGET ${PROJECT_NAME}
		  POST_BUILD
		  COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		  COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		  COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		  COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		  COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
	)


	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
	)

	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( x265 )

set(TARGET libx265 )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(FFMPEG ffmpeg)
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/linux")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}"  )


	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include
		COMMAND  cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="${LIBRARY_OUTPUT_PATH}/${FFMPEG}"  ../../source && make -j4 && make install
		DEPENDS yasm
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/build/linux
	)

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
	)

	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)
ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( rtmp )

set(TARGET librtmp )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(FFMPEG ffmpeg)
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/librtmp")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


	add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

	ADD_CUSTOM_COMMAND(
		OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
		COMMAND cd ./librtmp && make SYS=posix XCFLAGS="-I${LIBRARY_OUTPUT_PATH}/openssl/include"  XLDFLAGS="-L${LIBRARY_OUTPUT_PATH}/openssl/lib" 
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/librtmp/librtmp.a  ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/librtmp.a
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/librtmp/librtmp.so  ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/librtmp.so
		COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/librtmp/librtmp.so.1  ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/librtmp.so.1
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/librtmp/COPYING 
	)

	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )
##
##
##

project( ffmpeg )

set(TARGET libavcodec )
set(MAJOR 2)
set(MINOR 9.3)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

	set(LD ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} )

	set(LIB ${LD}/lib/${TARGET}${SUFFIX} ) 

	add_custom_target(${PROJECT_NAME} ALL DEPENDS  
		${LIB}
		COMMENT "${PROJECT_NAME}"
		)

	ADD_CUSTOM_COMMAND(
		OUTPUT  ${LIB}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND ./build.sh
		DEPENDS yasm fribidi libass theora vorbis x264 x265 rtmp
		WORKING_DIRECTORY ${PROJECT_DIRS}/${PROJECT_NAME}
	)

	set(LICENSES
		${PROJECT_SOURCE_DIR}/COPYING.GPLv2
		${PROJECT_SOURCE_DIR}/COPYING.GPLv3
		${PROJECT_SOURCE_DIR}/COPYING.LGPLv2.1
		${PROJECT_SOURCE_DIR}/COPYING.LGPLv3
		${PROJECT_SOURCE_DIR}/LICENSE.md
	)


	INSTALL(
		FILES ${LICENSES} DESTINATION  ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

project( qt )

set(TARGET libQt5Core )
set(Archive Qt.tar.gz )
set(MAJOR 5)
set(MINOR 6)
set(SUFFIX .so)
set(QT Qt)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )
	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/${MAJOR}.${MINOR}/gcc_64/lib")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

	add_custom_target(${PROJECT_NAME} ALL 
		#DEPENDS  
		#${PROJECT_LIB_DIR}/${TARGET}${SUFFIX}
		COMMENT "${PROJECT_NAME}"
		)

	INSTALL(
		DIRECTORY ${LIBRARY_OUTPUT_PATH}/${QT}/Licenses DESTINATION  ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )


project( qtpropertybrowser )

set(TARGET libqtpropertybrowser )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )

	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${LIBRARY_OUTPUT_PATH}")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

	add_custom_target(${PROJECT_NAME} ALL 
		DEPENDS  
		${LIBRARY_OUTPUT_PATH}/${TARGET}${SUFFIX}
		COMMENT "${PROJECT_NAME}"
		)

	set(ENV{QMAKESPEC} "${LIBRARY_OUTPUT_PATH}/${QT}/5.6/gcc_64/mkspecs/linux-g++")
	set(ENV{PATH} "${LIBRARY_OUTPUT_PATH}/${QT}/bin")

	ADD_CUSTOM_COMMAND(
		OUTPUT  ${LIBRARY_OUTPUT_PATH}/${TARGET}${SUFFIX}
		#TARGET ${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		COMMAND mkdir -p ./build
		COMMAND ./configure
		#"QMAKESPEC=${LIBRARY_OUTPUT_PATH}/${QT}/5.6/gcc_64/mkspecs/linux-g++"
		COMMAND ${CMAKE_COMMAND} -E env "PATH=PATH:${LIBRARY_OUTPUT_PATH}/${QT}/bin" qmake qtpropertybrowser.pro
		COMMAND make 
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} 
	)

	FILE(GLOB HEADERS "${PROJECT_SOURCE_DIR}/src/*.h")
	
	set(LIBS
		${PROJECT_SOURCE_DIR}/lib/libqwt.so.6.1.2
		${PROJECT_SOURCE_DIR}/lib/libqwt.so.6.1		
		${PROJECT_SOURCE_DIR}/lib/libqwt.so.6
		${PROJECT_SOURCE_DIR}/lib/libqwt.so
	)

#	INSTALL (
#		FILES ${LIBS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
#	)

	INSTALL (
		FILES ${HEADERS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
	)


#	set(
#		LICENSE ${PROJECT_SOURCE_DIR}/LICENSE 
#	)



#	INSTALL (
#		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
#	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

project( qwt )

set(TARGET libqwt )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .so)

IF (NOT DEFINED EXCLUDE_${PROJECT_NAME})
	message (STATUS "CMAKE ${PROJECT_NAME} " )

	set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
	set(PROJECT_LIB_DIR "${LIBRARY_OUTPUT_PATH}")
	set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

	add_custom_target(${PROJECT_NAME} ALL 
		DEPENDS  
		${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		COMMENT "${PROJECT_NAME}"
		)

	ADD_CUSTOM_COMMAND(
		OUTPUT  ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
		#TARGET ${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
		COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
		#COMMAND mkdir -p ./build
		#COMMAND ${CMAKE_COMMAND} -E env "PATH=PATH:${LIBRARY_OUTPUT_PATH}/${QT}/bin" qmake -query
		#"QMAKESPEC=${LIBRARY_OUTPUT_PATH}/${QT}/5.6/gcc_64/mkspecs/linux-g++"
		COMMAND ${CMAKE_COMMAND} -E env "PATH=${LIBRARY_OUTPUT_PATH}/${QT}/5.6/gcc_64/bin" qmake qwt.pro
		COMMAND make
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} 
	)
	

	FILE(GLOB HEADERS "${PROJECT_SOURCE_DIR}/src/*.h")
	FILE(GLOB LIBS "${PROJECT_SOURCE_DIR}/lib/libqwt.so*")

	set(
		LICENSE ${PROJECT_SOURCE_DIR}/COPYING
	)


	INSTALL (
		FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
	)

	INSTALL (
		FILES ${LIBS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
	)

	INSTALL (
		FILES ${HEADERS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
	)

ENDIF(NOT DEFINED EXCLUDE_${PROJECT_NAME} )

#FOREACH(dir ${SUBDIRS})
#	file(MAKE_DIRECTORY ${CMAKE_SOURCE_DIR}/${TARGET} )
#	message( STATUS "BUILD: " ${CMAKE_SOURCE_DIR}/source/${dir}  )
#	add_subdirectory( ${CMAKE_SOURCE_DIR}/${CMAKE}/${dir}  ${CMAKE_SOURCE_DIR}/${CMAKE}/${dir}/build )
#ENDFOREACH()



