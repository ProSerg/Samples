cmake_minimum_required (VERSION 2.8) 
 
set (PROJECT hello) 
set (TARGET libs)
set (LICENSE license)
set (SOURCE source)
set (CMAKE source)

#cmake_policy(SET CMP0009 NEW)
 
project (${PROJECT}) 

#include_directories( ./src/foo )


MACRO(RECDIRLIST return curdir)
  #FILE(GLOB_RECURSE children RELATIVE ${curdir} ${curdir}/*)
  FILE(GLOB_RECURSE children ${curdir}/*  )
  SET(dirlist "")
 
  FOREACH(child ${children})
    GET_FILENAME_COMPONENT(dirpath ${child} PATH)
    LIST(APPEND dirlist ${dirpath})
  ENDFOREACH()
  LIST(REMOVE_DUPLICATES dirlist)
  SET(${return} ${dirlist})

ENDMACRO()

MACRO(SUBDIRLIST return curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
 
  FOREACH(child ${children})
	IF(IS_DIRECTORY ${curdir}/${child})
        	LIST(APPEND dirlist ${child})
    	ENDIF()
  ENDFOREACH()
  LIST(REMOVE_DUPLICATES dirlist)
  SET(${return} ${dirlist})

ENDMACRO()

SUBDIRLIST(SUBDIRS ${CMAKE_SOURCE_DIR}/source )

set( PROJECT_DIRS ${CMAKE_SOURCE_DIR}/${SOURCE} )
set( LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/${TARGET})
set( LICENSE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/${LICENSE})

FILE(MAKE_DIRECTORY  ${LIBRARY_OUTPUT_PATH} )
FILE(MAKE_DIRECTORY  ${LICENSE_OUTPUT_PATH}  )

if (DEFINED LIBS )
 	set (SUBDIRS ${LIBS}  )
else( )

###
# add rest dirs
###
set (SUBDIRS 
	boost
	openssl
	cpp-netlib
	ffmpeg
	freeimage
	freetype
	gflags
	glew
	glog
	googletest
	libxml2
	live555
	mongocxx
	ogre
	portaudio
	protobuf
	sdl
	qtpropertybrowser	
)

endif()

##
##
##

project( openssl )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libssl )
set(MAJOR 1)
set(MINOR 0.2)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")



add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND ./config --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} shared && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)

set(LICENSES
	${PROJECT_SOURCE_DIR}/LICENSE
)

INSTALL (
        FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}    
)

##
##
##

project( boost )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libboost )
set(MAJOR 1)
set(MINOR 60.0)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/stage/lib")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/libxml")

add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin/${TARGET}_system${SUFFIX} COMMENT "${PROJECT_NAME}" )

message(STATUS "PATH: ${PROJECT_SOURCE_DIR}" )

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin/${TARGET}_system${SUFFIX}
	COMMAND ./bootstrap.sh && ./b2 headers && ./b2 link=shared variant=release --libdir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin --includedir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}
	COMMAND ./b2 link=shared variant=release --libdir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin --includedir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}  install
	DEPENDS openssl
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
)

set(LICENSES
	${PROJECT_SOURCE_DIR}/LICENSE_1_0.txt
)

INSTALL (
	FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
)

##
##
##

project( freetype )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libfreetype )
set(MAJOR 2)
set(MINOR 6.3)
set(SUFFIX .a)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/objs/.libs")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )



ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND export CXXFLAGS="$CXXFLAGS -fPIC"  && ./autogen.sh && ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} --enable-static --enable-shared  && make -j4 && make install 
	DEPENDS boost
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)

set(LICENSES
	${PROJECT_SOURCE_DIR}/docs/LICENSE.TXT
)

INSTALL (
	FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
)

##
##
##

project( libass )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libass )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(FFMPEG ffmpeg)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/libass/.libs")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
	COMMAND cd .. && ./build.sh
	DEPENDS freetype
	COMMENT "LibASS"
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
)
 

INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( cpp-netlib )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libcppnetlib-uri )
set(MAJOR 0)
set(MINOR 12)
set(SUFFIX .a)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/libs/network/src")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

set(CMAKE_MODULE_PATH ${LIBRARY_OUTPUT_PATH}/boost)

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND mkdir -p ./build
	COMMAND cd ./build && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}  -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++  -DBOOST_ROOT:PATHNAME=${LIBRARY_OUTPUT_PATH}/boost -DBOOST_LIBRARY_DIRS:FILEPATH=${LIBRARY_OUTPUT_PATH}/boost/lib -DOPENSSL_ROOT_DIR=${LIBRARY_OUTPUT_PATH}/openssl -DOPENSSL_LIBRARIES=${LIBRARY_OUTPUT_PATH}/openssl/bin -DOPENSSL_INCLUDE_DIR=${LIBRARY_OUTPUT_PATH}/openssl/include .. && make -j4 && make install
	DEPENDS boost
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	COMMENT "cpp-NetLib"
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)

set(LICENSES
	${PROJECT_SOURCE_DIR}/LICENSE_1_0.txt
)


INSTALL (
        FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}    
)

##
##
##

project( freeimage )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libfreeimage )
set(MAJOR 3)
set(MINOR 18.0 )
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/Dist")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/Source")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX} COMMENT "${PROJECT_NAME}" )

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX}
	COMMAND  make
	COMMAND  ${CMAKE_COMMAND} -E copy ${PROJECT_LIB_DIR}/${TARGET}-${MAJOR}.${MINOR}${SUFFIX} ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX}
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


file(GLOB HEADERS "${PROJECT_LIB_INCLUDE_DIR}/FreeImage.h" )

set(LIBS 
	${PROJECT_LIB_DIR}/${TARGET}-${MAJOR}.${MINOR}${SUFFIX}
)

set(LICENSES
	${PROJECT_SOURCE_DIR}/license-fi.txt
	${PROJECT_SOURCE_DIR}/license-gplv2.txt
	${PROJECT_SOURCE_DIR}/license-gplv3.txt
)
 
INSTALL (
	FILES ${HEADERS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
)

INSTALL (
	FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
)

##
##
##

project( libxml2 )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libxml2)
set(MAJOR 2)
set(MINOR 9.3)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/.libs")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/libxml")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND ./autogen.sh && ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} --disable-static --with-python-install-dir=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin  && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	COMMENT "LibXML2"
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)

set(LICENSE
	${PROJECT_SOURCE_DIR}/Copyright
)

INSTALL (
        FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)


##
##
##

project( live555 )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libliveMedia )
set(MAJOR 52)
set(MINOR 0.4)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/liveMedia")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}.${MAJOR}.${MINOR} COMMENT "${PROJECT_NAME}" )

set(LIBS 
	${PROJECT_SOURCE_DIR}/groupsock/libgroupsock.so.8.1.0
	${PROJECT_SOURCE_DIR}/liveMedia/libliveMedia.so.52.0.4
	${PROJECT_SOURCE_DIR}/BasicUsageEnvironment/libBasicUsageEnvironment.so.1.0.0
	${PROJECT_SOURCE_DIR}/UsageEnvironment/libUsageEnvironment.so.3.1.0			
)

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}.${MAJOR}.${MINOR}
#	COMMAND ./genMakefiles linux && make
	COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}
	COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin
	COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
	COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
	COMMAND ./genMakefiles linux-with-shared-libraries && make
	COMMAND cp -r ${PROJECT_SOURCE_DIR}/groupsock/libgroupsock.so.8.1.0 ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
	COMMAND cp -r ${PROJECT_SOURCE_DIR}/liveMedia/libliveMedia.so.52.0.4 ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
	COMMAND cp -r ${PROJECT_SOURCE_DIR}/BasicUsageEnvironment/libBasicUsageEnvironment.so.1.0.0 ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
	COMMAND cp -r ${PROJECT_SOURCE_DIR}/UsageEnvironment/libUsageEnvironment.so.3.1.0 ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	COMMENT "LiveMedia555"
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  PRE_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


file(GLOB_RECURSE HEADERS "${PROJECT_LIB_INCLUDE_DIR}/*.h*" )


set(LICENSES
	${PROJECT_SOURCE_DIR}/COPYING
)
 
INSTALL (
	FILES ${HEADERS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
)

INSTALL (
	FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
)

##
##
##

project( mongocxx )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libmongocxx )
set(CDRIVER libbson-1.0.so )
set(MAJOR 2)
set(MINOR 9.3)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/src/mongocxx")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

set(CDRIVER_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/cdriver_src")
set(CDRIVER_LIB_DIR "${CDRIVER_SOURCE_DIR}/.libs")

#SUBDIRS ( ${CMAKE_SOURCE_DIR}/source/boost )

add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${CDRIVER}  ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}"  )

ADD_CUSTOM_COMMAND(
	OUTPUT  ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${CDRIVER}
	COMMAND ./autogen.sh --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} && make -j4 && make install
	WORKING_DIRECTORY ${CDRIVER_SOURCE_DIR}
	COMMENT "MONGOC-DRIVER"
)


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND mkdir -p ./build && cd ./build && PKG_CONFIG_PATH=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/pkgconfig/ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}  .. && make -j4 && make install
	DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${CDRIVER} 
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	COMMENT "MONGOCXX-DRIVER"
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/libbson
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)

set(
        LICENSE_CXX 
		${PROJECT_SOURCE_DIR}/LICENSE 
)


set(
        LICENSE_C 
		${PROJECT_DIRS}/${PROJECT_NAME}/cdriver_src/COPYING
)


INSTALL (
        FILES ${LICENSE_CXX} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

INSTALL (
        FILES ${LICENSE_C} DESTINATION ${LICENSE_OUTPUT_PATH}/libson
)

###
###
###

project( portaudio )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libportaudio )
set(MAJOR 1)
set(MINOR 9)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib/.libs")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/")



add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} --disable-static  && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


set(LICENSES
	${PROJECT_SOURCE_DIR}/LICENSE.txt
)

INSTALL (
	FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
)

##
##
##

project( protobuf )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libprotobuf )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/src/.libs")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND ./autogen.sh && ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} --disable-shared  && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/LICENSE 
)


INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)


##
##
##

project( sdl )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libSDL2 )
set(MAJOR 2)
set(MINOR 0)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include")

add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX} COMMENT "${PROJECT_NAME}" )

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}-${MAJOR}.${MINOR}${SUFFIX}
	COMMAND mkdir -p ./build/ 
	COMMAND cd ./build/ && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} ..  && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


set(LICENSES
	${PROJECT_SOURCE_DIR}/COPYING.txt
)



INSTALL (
	FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
)

##
##
##

project( ogre )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libOgreMain )
set(MAJOR 2)
set(MINOR 1)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${PROJECT_LIB_DIR}/Dependencies/lib/libOIS.so ${PROJECT_LIB_DIR}/Dependencies/lib/libFreeImage.a
	COMMAND mkdir -p ./build
	COMMAND cd ./build && cmake -DCMAKE_INSTALL_PREFIX=${PROJECT_SOURCE_DIR}/Dependencies .. && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_DIRS}/${PROJECT_NAME}/deps
)

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND mkdir -p ./build
	COMMAND cd ./build && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} .. && make -j4 && make install
	DEPENDS ${PROJECT_LIB_DIR}/Dependencies/lib/libOIS.so ${PROJECT_LIB_DIR}/Dependencies/lib/libFreeImage.a
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
)

INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( gflags )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libgflags )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/lib")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND mkdir -p ./build
	COMMAND cd ./build && CXXFLAGS="-fPIC" cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} -DBUILD_STATIC_LIBS=ON .. && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/COPYING.txt 
)


INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( glew )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libGLEW )
set(MAJOR 2.0)
set(MINOR 0 )
set(SUFFIX .so)


set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/include/GL")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  PRE_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND cd ./auto && make -j4 && cd .. && make -j4
	COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_LIB_DIR}/${TARGET}${SUFFIX} ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} 
	COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_LIB_DIR}/${TARGET}${SUFFIX}.${MAJOR} ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}.${MAJOR} 
	COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_LIB_DIR}/${TARGET}${SUFFIX}.${MAJOR}.${MINOR} ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}.${MAJOR}.${MINOR}
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)


file(GLOB HEADERS "${PROJECT_LIB_INCLUDE_DIR}/*.h" )

set(LICENSES
	${PROJECT_SOURCE_DIR}/LICENSE.txt
)
 
INSTALL (
	FILES ${HEADERS} DESTINATION ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include
)

INSTALL (
	FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
)

##
##
##

project( glog )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libglog )
set(MAJOR 0)
set(MINOR 0.0)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/src/windows/glog")

add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND mkdir -p build 
	COMMAND cd ./build && export CXXFLAGS="-fPIC" && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} -DBUILD_SHARED_LIBS=ON .. && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)



set(LICENSES
	${PROJECT_SOURCE_DIR}/COPYING
)
 
INSTALL (
	FILES ${LICENSES} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}	
)

##
##
##

project( googletest )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libgtest)
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/googlemock/gtest")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/build")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib/${TARGET}${SUFFIX}
	COMMAND mkdir -p ./build
	COMMAND cd ./build && cmake -DCMAKE_INSTALL_PREFIX=${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} .. && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/googletest
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/googlemosk
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


set(GTEST
	${PROJECT_SOURCE_DIR}/googletest/LICENSE
)


set(GMOCK
	${PROJECT_SOURCE_DIR}/googlemock/LICENSE
)


INSTALL (
	FILES ${GTEST} DESTINATION ${LICENSE_OUTPUT_PATH}/googletest
)

INSTALL (
	FILES ${GMOCK} DESTINATION ${LICENSE_OUTPUT_PATH}/googlemosk
)

##
##
##

project( yasm )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libyasm )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(FFMPEG ffmpeg)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
	COMMAND ./configure --prefix="${LIBRARY_OUTPUT_PATH}/${FFMPEG}" && make -j4 && make install 
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
)


set(LICENSE
	${PROJECT_SOURCE_DIR}/COPYING
)


INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( fribidi )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libfribidi )
set(MAJOR .0)
set(MINOR .3.6)
set(SUFFIX .so)

set(FFMPEG ffmpeg)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib/.libs")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
	COMMAND  ./bootstrap && ./configure --prefix="${LIBRARY_OUTPUT_PATH}/${FFMPEG}" && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
)

INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( theora )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libtheora )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .so)

set(FFMPEG ffmpeg)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib/.libs")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
	COMMAND ./autogen.sh && ./configure --prefix=${LIBRARY_OUTPUT_PATH}/${FFMPEG}  && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
)

INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( vorbis )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libvorbis )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(FFMPEG ffmpeg)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/lib/.libs")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${PROJECT_LIB_DIR}/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${ffmpeg}/lib/${TARGET}${SUFFIX}
	COMMAND ./autogen.sh && ./configure --prefix="${LIBRARY_OUTPUT_PATH}/${FFMPEG}" && make -j4 && make install
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${ffmpeg} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${ffmpeg}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${ffmpeg}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${ffmpeg}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/COPYING
)


INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( x264 )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libx264 )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(FFMPEG ffmpeg)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

#set(CMAKE_MSVCIDE_RUN_PATH ${LibFoo_RUNTIME_LIBRARY_DIRS})

add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
	COMMAND cd .. && ./build.sh
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
)

INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( x265 )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libx265 )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(FFMPEG ffmpeg)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/build/linux")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}"  )


ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
	COMMAND  cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="${LIBRARY_OUTPUT_PATH}/${FFMPEG}"  ../../source && make -j4 && make install
	DEPENDS yasm
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/build/linux
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/COPYING 
)

INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( rtmp )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET librtmp )
set(MAJOR 1)
set(MINOR 0)
set(SUFFIX .a)

set(FFMPEG ffmpeg)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/librtmp")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")


add_custom_target(${PROJECT_NAME} ALL DEPENDS ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX} COMMENT "${PROJECT_NAME}" )

set(
	LIBS
	${PROJECT_SOURCE_DIR}/librtmp/librtmp.so
	${PROJECT_SOURCE_DIR}/librtmp/librtmp.so.1
	${PROJECT_SOURCE_DIR}/librtmp/librtmp.a
)
 

ADD_CUSTOM_COMMAND(
	OUTPUT ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/${TARGET}${SUFFIX}
	COMMAND cd ./librtmp && make SYS=posix XCFLAGS="-I${LIBRARY_OUTPUT_PATH}/openssl/include"  XLDFLAGS="-L${LIBRARY_OUTPUT_PATH}/openssl/lib" 
	COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/librtmp/librtmp.a  ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/librtmp.a
	COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/librtmp/librtmp.so  ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/librtmp.so
	COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_SOURCE_DIR}/librtmp/librtmp.so.1  ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib/librtmp.so.1
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${FFMPEG}/include 
)


set(
	LICENSE ${PROJECT_SOURCE_DIR}/librtmp/COPYING 
)

INSTALL (
	FILES ${LICENSE} DESTINATION ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

##
##
##

project( ffmpeg )
message (STATUS "CMAKE ${PROJECT_NAME} " )

set(TARGET libavcodec )
set(MAJOR 2)
set(MINOR 9.3)
set(SUFFIX .so)

set(PROJECT_SOURCE_DIR "${PROJECT_DIRS}/${PROJECT_NAME}/src")
set(PROJECT_LIB_DIR "${PROJECT_SOURCE_DIR}/")
set(PROJECT_LIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/")

set(LD ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} )

set(LIB ${PROJECT_LIB_DIR}/${TARGET}/${TARGET}${SUFFIX} ) 



add_custom_target(${PROJECT_NAME} ALL DEPENDS  
	${LD}/lib
	)

ADD_CUSTOM_COMMAND(
	OUTPUT  ${LD}/lib
	COMMAND ./build.sh
	DEPENDS yasm fribidi libass theora vorbis x264 x265 rtmp
	WORKING_DIRECTORY ${PROJECT_DIRS}/${PROJECT_NAME}
	COMMENT "FFMPEG-LIB"
)

ADD_CUSTOM_COMMAND(
	  TARGET ${PROJECT_NAME}
	  POST_BUILD
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME} 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/bin 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/lib 
          COMMAND ${CMAKE_COMMAND} -E make_directory ${LIBRARY_OUTPUT_PATH}/${PROJECT_NAME}/include 
)


set(LICENSES
	${PROJECT_SOURCE_DIR}/COPYING.GPLv2
	${PROJECT_SOURCE_DIR}/COPYING.GPLv3
	${PROJECT_SOURCE_DIR}/COPYING.LGPLv2.1
	${PROJECT_SOURCE_DIR}/COPYING.LGPLv3
	${PROJECT_SOURCE_DIR}/LICENSE.md
)


INSTALL(
	FILES ${LICENSES} DESTINATION  ${LICENSE_OUTPUT_PATH}/${PROJECT_NAME}
)

#FOREACH(dir ${SUBDIRS})
#	file(MAKE_DIRECTORY ${CMAKE_SOURCE_DIR}/${TARGET} )
#	message( STATUS "BUILD: " ${CMAKE_SOURCE_DIR}/source/${dir}  )
#	add_subdirectory( ${CMAKE_SOURCE_DIR}/${CMAKE}/${dir}  ${CMAKE_SOURCE_DIR}/${CMAKE}/${dir}/build )
#ENDFOREACH()



